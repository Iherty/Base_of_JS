"" + 1 + 0 // '10' Так как оператор + идет преобразование в строку
"" - 1 + 0 //  -1 Так как оператор - преобразование в число "" = 0
true + false // 1
6 / "3" // 2
"2" * "3" // 6
4 + 5 + "px" // '9px'
"$" + 4 + 5 // '$4' + 5 => '$4' + '5' = '$45'  Так как бинарный оператор +, то идет преобразование в строку. 
"4" - 2 // 2
"4px" - 2 // NaN Так как оператор минус, идет преобразование в число, но строка не может быть преобразована поэтому Nan
"  -9  " + 5 // "  -9  5" !Смотри на оператора сначало! Сложение со строкой превращает число 5 в строку и добавляет к строке.
"  -9  " - 5 // -14
null + 1 // 1
undefined + 1 // NaN undefined становится NaN после численного преобразования.
" \t \n" - 2 // -2 NaN Пробельные символы, такие как \t и \n, по краям строки игнорируются при преобразовании в число, так что строка " \t \n", аналогично пустой строке, становится 0 после численного преобразования.

let a = "1"; // prompt("Первое число?", 1);
let b = "2"; // prompt("Второе число?", 2);

alert(a + b); // 12 Причина в том, что окно запроса возвращает пользовательский ввод как строку.
let a = prompt("Первое число?", 1);
let b = prompt("Второе число?", 2);

alert(+a + +b); // 3