//1 Сокращенная запись
let billion = 1e6; 

console.log(billion);

//2 Метод num.toString(base) - возвращает строковое представление числа num в системе счисления base
let num = 13;
console.log( num.toString(2));

//Если использовать метод непосредственно на число, то следует ставить две точки, иначе будет ошибка

console.log(643..toString(2));

//3 Округление

let year = 2022;


console.log(Math.ceil(year/100)); // 21 век, округление в большую 20,2 = 21
console.log(Math.floor(year/100)); // округление в меньшую 20,2 = 20
console.log(Math.round(year/100)); // округление в ближайшее 20,2 = 20
console.log(Math.trunc(year/100)); // удаляет остаток/дробную часть 20,2 = 20

//Округление до n знаков после запятой. 
//Метод num.toFixed(до какого остатка округлять).
//Округляет и возвращает строковое представление результата.
//Округляет значение до ближайшего числа, как в большую, так и в меньшую сторону, аналогично методу Math.round
let number = 2.79;

console.log(+number.toFixed(1))

//4 ! ВНИМАНИЕ - ЗАПОМНИТЬ!
// Неточные вычисления - Наиболее часто встречающаяся ошибка при работе с числами в JavaScript – это потеря точности.
//Для хранения числа используется 64 бита: 52 из них используется для хранения цифр, 11 из них для хранения положения десятичной точки 
/*Число хранится в памяти в бинарной форме, как последовательность бит – единиц и нулей. 
Но дроби, такие как 0.1, 0.2, которые выглядят довольно просто в десятичной системе счисления, 
на самом деле являются бесконечной дробью в двоичной форме.*/

console.log(( 0.1 + 0.2 == 0.3 )); // false
console.log(( 0.1 + 0.2 )); // 0.30000000000000004

//Можно ли обойти проблему? Конечно, 
//наиболее надёжный способ — это округлить результат используя метод toFixed(n):

let sum = 0.1 + 0.2;

console.log( +sum.toFixed(2) == 0.3); // 0.30 - ноль убирается true



